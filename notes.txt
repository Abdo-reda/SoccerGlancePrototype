TODO:
    * Rename generate_transcrptions
    * Move the folder models inside the build_models
    * Make the folder Tests include logs



----

* create folder run_[data/time]
    //this folder will contain a log file and an outputfile


-------- RTMP server Notes 
[https://www.digitalocean.com/community/tutorials/how-to-set-up-a-video-streaming-server-using-nginx-rtmp-on-ubuntu-20-04] 
[https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04]
[https://serverspace.io/support/help/osnovnye-komandy-ufw]

I have decided to use nginx rtmp module, hopefully this works out.
    - I installed (sudo apt install) [https://gist.github.com/amitkhare/55155f9ae97013c45eff84eef84ab244]
         - nginx
        - libnginx-mod-rtmp -y
       

Also here are some commands: 
    - systemctl status nginx //gets status of server I think
    - sudo systemctl restart nginx //restarts server 
    - sudo systemctl reload nginx.service
    - sudo ufw app list
    - sudo ufw status
    - sudo ufw allow 1935/tcp
    - sudo ufw allow 'Nginx HTTP' //or FULL
    - xdg-open /etc/nginx //this the folder that contains nginx.config file ..

Other Commands:
    - xdg-open . //opens the current folder in file explorer isa 
    - sudo -i nautilus //opens root gui file explorer
    - sudo /usr/local/nginx/sbin/nginx -s stop
    - sudo /usr/local/nginx/sbin/nginx
    - sudo netstat -tanpl|grep nginx

Testing:
ffmpeg -re -i /home/g05-f22/Downloads/MatchTest.mkv -c:v libx264 -preset veryfast -tune zerolatency -c:a aac -f flv rtmp://localhost:1935/live/mystream

ffmpeg -i rtmp://localhost:1935/live/mystream -f segment -segment_time 30 -codec:a pcm_s16le -ar 44100 -ac 2 output_%03d.wav
ffmpeg -i rtmp://localhost:1935/live/mystream -f segment -segment_time 10 -codec:a libmp3lame -qscale:a 2 output_%03d.mp3
ffmpeg -i rtmp://localhost:1935/live/mystream -f segment -segment_time 30 -codec:a flac -ar 44100 -ac 2 output_%03d.flac 
ffmpeg -i rtmp://localhost:1935/live/mystream -f segment -segment_time 5 -codec:v libx264 -preset faster -crf 22 -pix_fmt yuv420p -an output_%03d.mkv
ffmpeg -i rtmp://localhost:1935/live/mystream -f segment -segment_time 5 -codec:v libx264 -preset faster -crf 22 -pix_fmt yuv420p -an -movflags +faststart output_%03d.mp4

//Ultra mode
ffmpeg -i rtmp://localhost:1935/live/mystream -f tee "[select=a:f=matroska:map=a,split=2][select=a:f=wav:map=0,split=2]" -map 0:v -segment_time 5 -codec:v libx264 -preset ultrafast -crf 22 -pix_fmt yuv420p -map 0:a -segment_time 30 -codec:a pcm_s16le -ar 44100 -ac 2 -f segment "output_mkv_%03d.mkv" -f segment "output_wav_%03d.wav"
ffmpeg -i rtmp://localhost:1935/live/mystream -f tee "[select=a:f=mkv]output.mkv|[select=a:f=wav]output.wav"


-c:a:137 libvorbis 
-c copy
-codec:a aac -b:a 128k
-codec:a libmp3lame -qscale:a 2 
-codec:a pcm_s16le -acodec copy

--presets: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow


conda install -c conda-forge x264



export LD_LIBRARY_PATH=/home/g05-f22/miniconda3/envs/MyPrototype/lib/libcudnn.so.8

LD_LIBRARY_PATH: /home/g05-f22/miniconda3/envs/MyNewPrototype/lib/python3.9/site-packages/cv2/../../lib64:/home/g05-f22/miniconda3/envs/MyPrototype/lib/libcudnn.so.8